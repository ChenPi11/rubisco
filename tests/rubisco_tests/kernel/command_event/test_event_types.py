# -*- mode: python -*-
# vi: set ft=python :

# Copyright (C) 2024 The C++ Plus Project.
# This file is part of the Rubisco.
#
# Rubisco is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# Rubisco is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

"""Test rubisco.kernel.command_event.event_types module.

This is a unittest generated by GitHub Copilot (Claude Sonnet 4), which is
totally useless. If somebody see this file, please close it immediately, or
create a issue or pull request to remove this file.
"""

from typing import Any

import pytest

from rubisco.kernel.command_event.callback import EventCallback
from rubisco.kernel.command_event.event_types import (
    EventObjectStat,
    EventObjectType,
)


class TestEventObjectStat:
    """Test EventObjectStat dataclass."""

    def test_event_object_stat_creation(self) -> None:
        """Test EventObjectStat creation."""

        def dummy_callback(
            options: list[Any],
            args: list[Any],
        ) -> None:
            del options
            del args

        callback = EventCallback(callback=dummy_callback, description="test")

        stat = EventObjectStat(
            type=EventObjectType.FILE,
            description="Test file",
            dir_callbacks=[callback],
        )

        if stat.type != EventObjectType.FILE:
            pytest.fail("stat.type` should be FILE.")
        if stat.description != "Test file":
            pytest.fail("`stat.description` should be 'Test file'.")
        if len(stat.dir_callbacks) != 1:
            pytest.fail("`stat.dir_callbacks` should have one callback.")

    def test_event_object_stat_defaults(self) -> None:
        """Test EventObjectStat with default values."""
        stat = EventObjectStat(
            type=EventObjectType.DIRECTORY,
            description="Test directory",
        )

        if stat.type != EventObjectType.DIRECTORY:
            pytest.fail("`stat.type` should be `DIRECTORY`.")
        if stat.description != "Test directory":
            pytest.fail("`stat.description` should be 'Test directory'.")

    def test_event_object_stat_with_alias(self) -> None:
        """Test EventObjectStat with alias type."""
        stat = EventObjectStat(
            type=EventObjectType.ALIAS,
            description="Test alias",
            alias_to="/some/path",
        )

        if stat.type != EventObjectType.ALIAS:
            pytest.fail("stat.type should be ALIAS")
        if stat.description != "Test alias":
            pytest.fail("stat.description should be 'Test alias'")
        if str(stat.alias_to) != "/some/path":
            pytest.fail("stat.alias_to should be '/some/path'")

    def test_event_object_stat_with_mount_point(self) -> None:
        """Test EventObjectStat with mount point type."""
        stat = EventObjectStat(
            type=EventObjectType.MOUNT_POINT,
            description="Test mount point",
            mount_to="/bin/ls",
        )

        if stat.type != EventObjectType.MOUNT_POINT:
            pytest.fail("`stat.type` should be `MOUNT_POINT`.")
        if stat.description != "Test mount point":
            pytest.fail("`stat.description` should be 'Test mount point'.")
        if stat.mount_to != "/bin/ls":
            pytest.fail("`stat.mount_to` should be '/bin/ls'")

    def test_event_object_stat_alias_validation(self) -> None:
        """Test EventObjectStat alias validation."""
        with pytest.raises(ValueError, match="Alias must have an alias_to"):
            EventObjectStat(
                type=EventObjectType.ALIAS,
                description="Test alias without alias_to",
            )
